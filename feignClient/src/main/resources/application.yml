spring:
  cloud:
    openfeign:
      client:
        config:
          weather: # Это название нашего feignCleint из WeatherExternalApi
            url: http://localhost:8090/api/weather # По этому адресу будут обращаться методы из WeatherExternalApi
            connection-timeout: 5000 # сколько миллисекунд feign client будет ждать установления соединения, иначе ошибка
            read-timeout: 5000 # сколько миллисекунд feign client будет ждать ответ когда соединение уже установлено, иначе ошибка SocketTimeoutException

# Настойка Circuit Breaker
# В Circuit Breaker есть 3 состояния:
# CLOSED (замкнут) - запрос отправляется на приложение, если при запросах происходит ожидаемое количество сбоев запускается таймер, по истечении которого circuit vreater
# переходит в состоянии half-open, для того что бы дать внешней системе время на исправление ошибки
# OPEN (разомкнут) - запросы не отправляются на приложение завершаясь с ошибкой и возвращая исключение
# HALF-OPEN (полуоткрыт) - разрешает ограниченному количеству запросов отправляться на приложение, если запрос выполнился успешно предполагается что ошибка которая вызвала сбой
# исправлена и circuit breaker переходит в состояние closed (счетчик сбоев сбрасывается), если запрос завершился с ошибкой значит неисправность все еше есть то
# circuit breaker переходит в состояние open и перезапускает таймер чтобы дать внешней системе время восстановиться
resilience4j:
  circuitbreaker:
    instances:
      weather-breaker: # Какая конфигурация Circuit Breaker будет использоваться, определяется по имени
        sliding-window-type: count_based # Скользящее окно будет работать по количеству неуспешных ответов
        sliding-window-size: 5 # Количество ответов которые будем анализировать
        failure-rate-threshold: 75  # Порог в процентах при котором происходит размыкание цепи
        minimum-number-of-calls: 5 # Когда начинать счет успешных и не успешных запросов, после скольки запросов
        max-wait-duration-in-half-open-state: 5s # Время сколько Circuit Breaker в half-open (полуоткрытом) состоянии
        wait-duration-in-open-state: 10s # Время сколько Circuit Breaker в OPEN (разомкнутом) состоянии
        automatic-transition-from-open-to-half-open-enabled: true # По истечении времени нахождения Circuit Breaker в OPEN (разомкнутом) состоянии переходить в состояние half-open (полуоткрытом)
        permitted-number-of-calls-in-half-open-state: 2 # Разрешенное количество вызовов которое отправится на внешний сервис если Circuit Breaker в состоянии half-open (полуоткрытом), если они выполнятся с ошибкой то переходим в состояние OPEN (разомкнут) если же они выполнились успешно то переходим в CLOSE (замкнут)
